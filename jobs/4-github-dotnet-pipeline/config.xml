<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>Aşağıdaki yazılan pipelineyi kullanarak sample-mvc projesini indirir ve dotnetsdk kullanarak testlerini yapar. Daha sonra ise proje docker kullanılarak image alınıp dockerhub hesabına yüklenir. Daha sonrada docker-compose.yml dosyasını kullnarak projeyi çalıştırır.</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.coravy.hudson.plugins.github.GithubProjectProperty plugin="github">
      <projectUrl><githubproject></projectUrl>
      <displayName></displayName>
    </com.coravy.hudson.plugins.github.GithubProjectProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps">
    <script>pipeline {
      environment {
    dotnet = &apos;./sample-mvc&apos;
  }
        agent any

    stages {
        
        stage(&apos;Clone sources&apos;) {
            steps {
                     git branch: &apos;main&apos;,
                     credentialsId: &apos;githubCredential&apos;,//Repo public durumunda githubCredential olup olmaması önemli değildir.
            url: &apos;<github>&apos;
            }
        }
        stage(&apos;Restore&apos;) {
            steps {
                sh &apos;dotnet restore $dotnet&apos;
            }
        }
        stage(&apos;Build&apos;) {
            steps {
                    sh &apos;dotnet build $dotnet&apos;
                
            }
        }
        stage(&apos;Test&apos;) {
            steps {
                    sh &apos;dotnet test $dotnet&apos;
            }
        }
                stage(&apos;build and push&apos;) {
            steps {
                                    script {
                        docker.withRegistry(&apos;https://registry-1.docker.io/v2/&apos;, &apos;dockerhubCredential&apos;){
                            def dockerImage = docker.build(&apos;<dockerhub>&apos;)
                            dockerImage.push()
                        }
                    }
            }
        }
        
                        stage(&apos;deploy&apos;) {
            steps {
                    sh &apos;docker-compose up --build -d&apos;
            }
        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>